블락 암호도 누락이 될 수 있다.
1비트 오류가 블록 전체에 오류를 야기시킴
CBC는 오류가 발생해도 해당 블록과 그 다음블록 까지만 영향을 받는다.(복호화 과정을 생각해보자)
그래서 오류를 자동으로 복원한다고 할 수 있다.

ECB CBC 는 여전히 CUT AND PASTE 공격에 약함

MAC - 데이터의 무결성을 보기 위한 방법

Counter Mode(CTR)
Count값(offset) 설정 후 
평문 블록의 순서에 따라 카운트값을 순차적으로 증가
p1 xor Encript(Count) = c1
p2 xor Encript(Count+1) = c2
p3 xor Encript(Count+2) = c3
이런식으로 하면 복호화를 병렬로 처리할 수 있음.
각 블록을 복호화 하고 순서만 조정하면됨

Cipher Feedback Mode(CFB)
CBC와 비슷하나 순서가 좀 다름

Encript(C0) xor P1 = C1
Encript(C1) xor P2 = C2 
이런식 

Output Feedback Mode(OFM)
Encript(C0) xor P1 = C1
Encript(Encript(C0)) xor P2 = C2
Encript(Encript(Encript(C0)))xor P3 = C3
이런식으로 감

Galois Counter Mode(GCM)
Authenticated Encryption with Associated Data(AEAD)- 데이터를 암호화 하면서 무결성도 확보하는 메커니즘

공개키 암호화(Asymmetric crypto primitives)
-RSA(Rivest, Shamir, Adleman)	: 합성수를 두개의 임의의 소수로 인수분해하는 어려움에 기반한 알고리즘
factoring 기반의 암호화,
(1)p,q 는 큰 소수
(2)N= pq	modulus
(3)e는 (p-1)(q-1)의 서로소
(4)ed = 1 mod (p-1)(q-1)

public key는 (N,e) private key는 d
Message M(평문)을 암호화 할 때, C = M^e mod N (전제 : M<N)
암호문 C를 복호화 할때 M = C^d mod N

암호화 및 복호화에 시간이 오래걸림
e값이 너무 작으면 문제가 생김 통상적으로 RSA는 계산이 복잡해서
e값을 3으로 잡는 경우가 많아서 3제곱근으로 풀어버리면 원문이 드러나는 경우가 많음




-Diffie-Hellman key establishment : discrete logarithms 로그 기반
이산 로그 기반의 알고리즘
키 교환을 하는 메커니즘
p,g : 공개
A's private key : x, B's private key : y  -> 비공개
A와 B 가 키를 교환할 때, p = 17, g = 2, x = 11, y = 13 라하면,
g^x mod p = 2^11 mod 17 = 8 을 보냄 	A->B
g^y mod p = 2^13 mod 17 = 15를 보냄 B->A
A의 입장에서 15(받은 값)^11(개인키) mod 17 = 9
B의 입장에서 8(받은 값)^13(개인키) mod 17 = 9
같은 값이 나오고, 그 값을 대칭키로 사용

중간자 공격에 취약함

-Elliptic curve cryptography(ECC) : 타원 곡선을 나타내는 다항식의 성질을 이용한 암호화
서명과 암호화 둘다 사용 가능
짧은 키(비트 수)를 가지고 높은수준의 보안을 제공
디지털 서명과 키 교환등에 많이 사용됨
RSA 보다 빠르다. 

음수의 modulo 연산
-a%b => a%b 의 값을 음수로 만들고 +b
예시)-3 % 5 => 3 % 5  => 3 => -3 +5 = 2 
분수의 modulo 연산
(a/b) % c -> ((b/a)*x) % 5 = 1 이되는 x를 찾음
예시) 2^-1 % 5 = (2*x) % 5 = 1 이되는 x 를 찾음 여기서 x=3

ECC Diffie-Hellman : 키 교환을 위한 알고리즘
공개키 : 타원곡선, 곡선 위의 한 점(예(2,5))
Alice's private = 4
Bob's private = 7
공개키인 곡선 위의 한 점을 자신의 개인키 만큼 곱함 (이때 곱셈은 덧셈을 몇번하는지임 ECC에서의 덧셈은 일반 덧셈과 다르게 ㅈㄴ복잡함 공식있음)
예시에선 Alice 는 4*(2,5) 한 값인 (7,32)를 Bob에게 
Bob은 7*(2,5) 한 값인 (18,35)를 Alice에게 보냄
각각 받은 점의 좌표값을 다시 자신의 Private 키로 ECC에서 곱셈으로 연산함 
결과로 나온 좌표값은 둘이 동일하게 나옴(같은 키 값을 공유하게됨)

부인봉쇄 


-CAs(Certification authorities) 	: 인증기관	

Public key Infrastructure 
공개키 운영을 매끄럽게 하기 위한 체계
특정 개인키 및 공개키와 그의 대한 정보(발급 시기, 유효 기간) 등을
인증기관의 개인키로 서명, 그럼 다른 사람들은 그 기관이 인증했다고 믿을 수 있음

PKI Trust models
monopoly model 
CA를 하나만 두자는 주장, 하나뿐인 CA에 문제가 생기면 ㅈ망

Oligarchy 
소수 독점 모델, 인증(신뢰)을 받은 소수의 CA를 사용
하나가 망가져도 다른걸 사용 가능, 사용자가 선택 가능하다는 장점

Anarchy model
모든 사람이 CA가 될 수 있음
사용자들이 누굴 신뢰할 지를 결정해야함

